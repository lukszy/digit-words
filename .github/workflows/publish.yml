name: Publish

on:
  push:
    branches:
      - master

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          registry-url: https://registry.npmjs.org

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Determine version information
        id: version
        run: |
          set -eo pipefail
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            PREVIOUS_VERSION=$(git show HEAD^:package.json | node -pe "JSON.parse(require('fs').readFileSync(0, 'utf8')).version")
          else
            PREVIOUS_VERSION=
          fi
          echo "current=$CURRENT_VERSION" >>"$GITHUB_OUTPUT"
          echo "previous=$PREVIOUS_VERSION" >>"$GITHUB_OUTPUT"
          if [ "$PREVIOUS_VERSION" = "$CURRENT_VERSION" ]; then
            echo "bump=true" >>"$GITHUB_OUTPUT"
          else
            echo "bump=false" >>"$GITHUB_OUTPUT"
          fi

      - name: Bump patch version when unchanged
        if: steps.version.outputs.bump == 'true'
        run: pnpm version patch --no-git-tag-version

      - name: Commit version bump
        if: steps.version.outputs.bump == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit -m "chore: bump patch version [skip ci]"
          git push

      - name: Get version for tag
        id: package_version
        run: echo "version=$(node -p "require('./package.json').version")" >> "$GITHUB_OUTPUT"

      - name: Create and push git tag
        run: |
          git tag "v${{ steps.package_version.outputs.version }}"
          git push origin "v${{ steps.package_version.outputs.version }}"

      - name: Run tests
        run: pnpm test

      - name: Build package
        run: pnpm build

      - name: Publish package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --no-git-checks --access public

      - name: Generate release notes
        id: release_notes
        run: |
          if [ "${{ steps.version.outputs.bump }}" = "true" ]; then
            NOTES="Auto-generated release for version ${{ steps.package_version.outputs.version }}"
          else
            NOTES=$(git log v${{ steps.version.outputs.previous }}..HEAD --pretty=format:"- %s" || echo "Initial release")
          fi
          echo "notes<<EOF" >> "$GITHUB_OUTPUT"
          echo "$NOTES" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.package_version.outputs.version }}
          name: Release v${{ steps.package_version.outputs.version }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false
